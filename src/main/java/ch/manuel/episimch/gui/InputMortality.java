//Autor: Manuel Schmocker
//Datum: 19.04.2020

package ch.manuel.episimch.gui;

import ch.manuel.population.Population;
import ch.manuel.utilities.MyUtilities;
import java.text.DecimalFormat;
import java.text.NumberFormat;

// Input Dialog: Sterblichkeit

public class InputMortality extends javax.swing.JDialog {

    /**
     * Creates new form InputDialog3
     */
    public InputMortality(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        // set standard values
        InputMortality.setMortDistr();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel7.setText("Parameter Start");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"0–9 Jahre",  new Float(0.0)},
                {"10–19 Jahre",  new Float(0.001)},
                {"20–29 Jahre",  new Float(0.01)},
                {"30–39 Jahre",  new Float(0.03)},
                {"40–49 Jahre",  new Float(0.05)},
                {"50–59 Jahre",  new Float(0.15)},
                {"60–69 Jahre",  new Float(1.05)},
                {"70–79 Jahre",  new Float(4.5)},
                {"80+ Jahre",  new Float(15.0)}
            },
            new String [] {
                "Altersklasse", "Sterblichkeit in %"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
        }

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jButton2.setText("Test");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 1, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // update values (mortality)
        this.setMortDistr();
        // hide
        this.setVisible( false );
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // update values (mortality)
        this.setMortDistr();
        // test values
        this.testInput();
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton jButton1;
    private static javax.swing.JButton jButton2;
    private static javax.swing.JLabel jLabel7;
    private static javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JTable jTable1;
    private static javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    // test input and print results
    private void testInput() {
        String str = "";
        float sum = 0f;
        float[] percents = new float[101];
        NumberFormat formatter = new DecimalFormat("#0.00");
        
        // calculate fraction of mortality per age
        for( int i = 0; i < 101; i++ ) {
            // get mortality 
            float mort = Population.getMortality(i);
            // percent of population per age (0 ... 100 years)
            percents[i] = mort * Population.getFractionOfPop(i) * 100;
            
            //str += mort + ", i = " + i + ": " + formatter.format( percent ) + "\n";
        }
        // calculate sum
        for( int i = 0; i < 101; i++ ) {
            sum += percents[i];
        }
        // calculate median
        int median = 0;
        float sum2 = 0;
        while( sum2 < (sum/2f) ) {
            sum2 += percents[median];
            median++;
        }
        
        // number death
        int nbDeath = Math.round( sum / 100f * Population.getNbPersons() );
        // print string
        str += "Erwartete Sterblichkeit: " + MyUtilities.getStringFromDbl( sum ) + "%\n" +
               "Erwartete Anzal: " + nbDeath + "\n" +
               "Erwarteter Median: " + median + " Jahre";
        jTextArea1.setText( str );
    }
    
    // set distribution of mortality in "Class Population"
    private static void setMortDistr() {
        // read table input:
        float[] mort = new float[9];
        for( int i = 0; i < 9; i++ ) {
            mort[i] = (float) jTable1.getModel().getValueAt( i, 1) / 100f;
        }
        // set value in Class Population
        Population.setMortDistr(mort);
    }
}
